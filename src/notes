#2
npx create-react-app dojo-blog
npm run start # levantar el localhost
npm install node_modules (node_modules because it isn't in gitgub)

#3
Describe components: templates and logic
use htlm in most of files and jsx template in App.js

#4
create and use variables 
single values are print in the dom easily
Use special components: h1,p,a
Export para mostrar el componente en el dom

#5 Multiple Components
(Goal: Create two components inside App.js)

App.js the first component redered to the DOM 

Component is a function that returns a jsx template and it is exported at the bottom of the file

Root component is App.js:
App.js
    - Navbar.js
    - BlogDetails.js
    - Sidebar.js
        + Categories.js
        + Tags.js

install simple react snippets to choose templates while coding
- sfc: create a component in an easy way

import the Navbar component inside app.js
look the self close at 4:30

#6 Adding styles
styles in App.css, it applies to all components. It is like a global stylesheet

changes the styles from App.css to index.css

inline styling check doble brackets (5:21) dinamic value and javascript object 

#7 Click Events
example of events: hover, click, keyboards

create a button

create a function and assign it to an element that fires a text in console

dont put and argument into handleClick because it fires automatically

uses an anonimous function

shows an event object. It is a dict

#8 Using state(useState hook)
 You need to create a reactive variable with useState (hook) so if you initially displayed 'mario' and then click a button, it renders in the dome and the name displayed now is luigui. It uses setName and setAge functions to do it.

#9 Intro dev tools
It allows you to debug and test your application
Install react developer tools installs two extra tabs in the console menu: components and profiler.
The eye icon goes to a dom element
the spider icon & console goes to the app component
<> icon let you go to the source file

#10 Outputting lists
This time you will update blogs uses a map function that cycles(bucle) through an array (a list of blogs for example, separated later in BlogList.js) with an id into the dom 

#11 Props
Way to pass data from a parent component into a child component. In Home.js, he parent is const[blogs, setBlogs] an the child is BlogList. 
The prop is blogs={blogs}

#12 Reusing Components
The use of filters to show a sublist of the array 

#13 Functions as Props
To Delete blogs you need to pass the id. But create the handleDelete function in the same file where is setBlog method and pass it as a prop

#14 useEffect Hook (the basis)
useEffect runs a function every rendered of the components. 
Applications are to fetch data or do some authentication

#15 useEffect dependencies

#16 Using JSON server (ver JSON server tutorial)
JSON server is a package that simulates a fake response api (json response)
See the tutorial https://www.youtube.com/watch?v=mAqYJF-yxO8&list=PL4cUxeGkcC9i2v2ZqJgydXIcRq_ZizIdD&index=2

open another terminal: **npx json-server --watch data/db.json --port 8000 **

End points:
    /blogs          GET     Fetch all blogs
    /blogs/{id}     GET     Fetch a single blog
    /blogs          POST    Add a new blog
    /blogs/{id}     DELETE  Delete a blog


#17 Fetching data with useEffect
Pulled json data to localhost, extract this data and show in the app content
An special rutine to avoid the first null appereance (manage a conditional templating &&). 

#18 Conditional Loading Message
Show a message "loading data ..."
Introduce a time delay (1 sec.) in the dom

#19
Simulate an error and see how the error is handle (like http://localhost:8000/blogss). Put in console and dom.

Ernesto example: 3 niveles de manejo de errores(1. Capturar el error, 2. Mail al responsable del código en el github y 3. Mostrar el tableros en BI)

#20 Making a Custom Hook
Reuse the code of a component with the same properties (data, pending and error)
create a file useFetch.js
a custom hook force to start with "use"
move the the properties and behavior. dont forget to export
change the property setBlogs to setData
correct design is to pass the url to useFetch

then import into the home component and use it
data:blogs change the name of the variable

#21 The react Router
to handle many pages
theory of non-react websites
initial request from your computer and the server returns the index.html
then click on contact page, contact request and the server returns contact.html
and over again

theory of react websites
less request to the server because it stays on the client side

initial request and server returns index.html and js bundle (of react)
/contact request reacts intercepts in the client side and returns to update the DOM

/           /contact            /about 
Home.js     Contact.js          About.js

set up on terminal these tools: *** npm install react-router-dom@5 ***
check the instalation in package.json "react-router-dom": "^5.3.3"

Switch with Route to change components (like pages) in the App.js
One Route

#22 Exact Match Routes
Another form or two routes
use exact to display the forms correctly
switch component: 
obs. why click 

#23 Router links(!)
links to handle the routing in the browser (intercept the requests, don't go to server)
import the link into navbar
change the href to link

#24 useEffect Cleanup
manage clicks between fetches. 
In two quickly fetches there is an error in console. To solve, use a clean up funtion and abort controller

use an abort controller
// test

#25 Route Parameters
variables inside route. use ids
hay problemas de comillas check
recibir dos parametros en app.js así /a/b

#26 Re-using a Custom Hook
todo el video
el equipo tambien va usar flutter

#27 Controlled inputs(forms)
Matar todo en un puerto kill -9 $(lsof -ti:3000)
objetos y estilos separados 
Llenar un formulario con eventos asociados

#28 submit events
not to erase recent values

#29 Making a POST request
create blog object
ernesto detectó un error

#30 Programatic Redictects
